[{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it.","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"Discover what the Hugo - LoveIt theme is all about and the core-concepts behind it. ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 Requirements Thanks to the simplicity of Hugo, Hugo is the only dependency of this theme. Just install latest version of  Hugo (\u003e 0.62.0) for your OS (Windows, Linux, macOS). Why not support earlier versions of Hugo? Since Markdown Render Hooks was introduced in the Hugo Christmas Edition, this theme only supports Hugo versions above 0.62.0. Hugo extended version is recommended Since some features of this theme need to processes  SCSS to  CSS, it is recommended to use Hugo extended version for better experience. ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 Installation The following steps are here to help you initialize your new website. If you don’t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners. ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 Create Your Project Hugo provides a new command to create a new website: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 Install the Theme The LoveIt theme’s repository is: https://github.com/dillonzq/LoveIt. You can download the latest release  .zip file of the theme and extract it in the themes directory. Alternatively, clone this repository to the themes directory: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt Or, create an empty git repository and make this repository a submodule of your site directory: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 Basic Configuration The following is a basic configuration for the LoveIt theme: baseURL = \"http://example.org/\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" # website title title = \"My New Hugo Site\" # language code [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"en\" # language name [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"English\" # Author config [author] name = \"xxxx\" email = \"\" link = \"\" # Menu config [menu] [[menu.main]] weight = 1 identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false Note When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 Create Your First Post Here is the way to create your first post: hugo new posts/first_post.md Feel free to edit the post file by adding some sample content and replacing the title value in the beginning of the file. Note By default all posts and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata, set the property draft: false or add -D/--buildDrafts parameter to hugo command. ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 Launching the Website Locally Launch by using the following command: hugo serve Go to http://localhost:1313. Basic configuration preview Tip When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Note Since the theme use .Scratch in Hugo to implement some features, it is highly recommended that you add --disableFastRender parameter to hugo server command for the live preview of the page you are editing. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 Build the Website When your site is ready to deploy, run the following command: hugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server. Tip The website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use AWS Amplify, Github pages, Render and more… ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 Configuration ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 Site Configuration In addition to Hugo global configuration and menu configuration, LoveIt lets you define the following parameters in your site configuration (here is a config.toml, whose values are default). Please open the code block below to view the complete sample configuration : baseURL = \"http://example.org/\" # Change the default theme to be use when building the site with Hugo theme = \"LoveIt\" # website title title = \"My New Hugo Site\" # language code [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"en\" # language name [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"English\" # whether to include Chinese/Japanese/Korean hasCJKLanguage = false # default amount of posts in each pages paginate = 12 # google analytics code [UA-XXXXXXXX-X] googleAnalytics = \"\" # copyright description used only for seo schema copyright = \"\" # whether to use robots.txt enableRobotsTXT = true # whether to use git commit log enableGitInfo = true # whether to use emoji code enableEmoji = true # ignore some build errors ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # Author config [author] name = \"xxxx\" email = \"\" link = \"\" # Menu config [menu] [[menu.main]] weight = 1 identifier = \"posts\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" name = \"Posts\" url = \"/posts/\" # title will be shown when you hover on this menu link title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [params] # site default theme [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # public git repo url only then enableGitInfo is true gitRepo = \"\" # which hash function used for SRI, when empty, no SRI is used # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # date format dateFormat = \"2006-01-02\" # website title for Open Graph and Twitter Cards title = \"My cool site\" # website description for RSS, SEO, Open Graph and Twitter Cards description = \"This is my cool site\" # website images for Open Graph and Twitter Cards images = [\"/logo.png\"] # Header config [params.header] # desktop header mode [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # mobile header mode [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # Header title config [params.header.title] # URL of the LOGO logo = \"\" # title name name = \"\" # you can add extra information before the name (HTML format is supported), such as icons pre = \"\" # you can add extra information after the name (HTML format is supported), such as icons post = \"\" # whether to use typeit animation for title name typeit = false # Footer config [params.footer] enable = true # Custom content (HTML format is supported) custom = '' # whether to show Hugo and theme info hugo = true # whether to show copyright info copyright = true # whether to show the author author = true # Site creation time since = 2019 # ICP info only in China (HTML format is supported) icp = \"\" # license info (HTML format is supported) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (all posts) page config [params.section] # special amount of posts in each section page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # List (category or tag) page config [params.list] # special amount of posts in each list page paginate = 20 # date format (month and day) dateFormat = \"01-02\" # amount of RSS pages rss = 10 # App icon config [params.app] # optional site title override for the app when added to an iOS home screen or Android launcher title = \"My cool site\" # whether to omit favicon resource links noFavicon = false # modern SVG favicon to use","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 Favicons, Browserconfig, Manifest It is recommended to put your own favicons: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) into /static. They’re easily created via https://realfavicongenerator.net/. Customize browserconfig.xml and site.webmanifest to set theme-color and background-color. ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 Style Customization Note Hugo extended version is necessary for the style customization. LoveIt theme has been built to be as configurable as possible by defining custom .scss style files. The directory including the custom .scss style files is assets/css relative to your project root directory. In assets/css/_override.scss, you can override the variables in themes/LoveIt/assets/css/_variables.scss to customize the style. Here is a example: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; In assets/css/_custom.scss, you can add some css style code to customize the style. ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 Multilingual and i18n LoveIt theme is fully compatible with Hugo multilingual mode, which provides in-browser language switching. Language Switch ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 Compatibility Language Hugo Code HTML lang Attribute Theme Docs Lunr.js Support English en en Simplified Chinese zh-cn zh-CN Traditional Chinese zh-tw zh-TW French fr fr Polish pl pl Brazilian Portuguese pt-br pt-BR Italian it it Spanish es es German de de German de de Serbian sr sr Russian ru ru Romanian ro ro Vietnamese vi vi Arabic ar ar Catalan ca ca Thai th th Telugu te te Indonesian id id Turkish tr tr Korean ko ko Hindi hi hi ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 Basic Configuration After learning how Hugo handle multilingual websites, define your languages in your site configuration. For example with English, Chinese and French website: # determines default content language [\"en\", \"zh-cn\", \"fr\", \"pl\", ...] defaultContentLanguage = \"en\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" [[languages.en.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[languages.en.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" languageCode = \"zh-CN\" languageName = \"简体中文\" hasCJKLanguage = true [[languages.zh-cn.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" [[languages.fr.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" [[languages.fr.menu.main]] weight = 3 identifier = \"categories\" name = \"Catégories\" pre = \"\" post = \"\" url = \"/categories/\" title = \"\" Then, for each new page, append the language code to the file name. Single file my-page.md is split in three files: in English: my-page.en.md in Chinese: my-page.zh-cn.md in French: my-page.fr.md Note Be aware that only translated pages are displayed in menu. It’s not replaced with default language content. Tip Use Front Matter parameter to translate urls too. ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 Overwrite Translation Strings Translations strings are used for common default values used in the theme. Translations are available in some languages, but you may use another language or want to override default values. To override these values, create a new file in your local i18n folder i18n/\u003clanguageCode\u003e.toml and inspire yourself from themes/LoveIt/i18n/en.toml. By the way, as these translations could be used by other people, please take the time to propose a translation by  making a PR to the theme! ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 Search Based on Lunr.js or algolia, searching is supported in LoveIt theme. ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 Output Configuration In order to generate index.json for searching, add JSON output file type to the home of the outputs part in your site configuration. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 Search Configuration Based on index.json generated by Hugo, you could activate searching. Here is the search configuration in your site configuration: [params.search] enable = true # type of search engine [\"lunr\", \"algolia\"] type = \"lunr\" # max index length of the chunked content contentLength = 4000 # placeholder of the search bar placeholder = \"\" # max number of results length maxResultLength = 10 # snippet length of the result snippetLength = 30 # HTML tag name of the highlight part in results highlightTag = \"em\" # whether to use the absolute URL based on the baseURL in search index absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" How to choose search engine? The following is a comparison of two search engines: lunr: simple, no need to synchronize index.json, no limit for contentLength, but high bandwidth and low performance (Especially for Chinese which needs a large segmentit library) algolia: high performance and low bandwidth, but need to synchronize index.json and limit for contentLength The content of the post is separated by h2 and h3 HTML tag to improve query performance and basically implement full-text search. contentLength is used to limit the max index length of the part starting with h2 and h3 HTML tag. Tips about algolia You need to upload index.json files to algolia to activate searching. You could upload the index.json files by browsers but a CLI tool may be better. The official Algolia CLI is a good choice. To be compatible with Hugo multilingual mode, you need to upload different index.json for each language to the different index of algolia, such as zh-cn/index.json or fr/index.json… ","date":"2020-03-06","objectID":"https://www.bardblog.cn/en/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"Theme Documentation - Basics","uri":"https://www.bardblog.cn/en/theme-documentation-basics/"},{"categories":["documentation"],"content":"Find out how to create and organize your content quickly and intuitively in LoveIt theme.","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Find out how to create and organize your content quickly and intuitively in LoveIt theme. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"1 Contents Organization A few suggestions to help you get a good looking site quickly: Keep post pages in the content/posts directory, for example: content/posts/my-first-post.md Keep other pages in the content directory, for example: content/about.md Local resources organization Local Resource Reference There are three ways to reference local resources such as images and music: Using page resources in page bundles. You can reference page resources by the value for Resources.GetMatch or the filepath of the resource relative to the page directory directly. Store resources in the assets directory, which is /assets by default. The filepath of the resource to reference in the post is relative to the assets directory. Store resources in the static directory, which is /static by default. The filepath of the resource to reference in the post is relative to the static directory. The priority of references is also in the above order. There are many places in the theme where the above local resource references can be used, such as links, images, image shortcode, music shortcode and some params in the front matter. Images in page resources or assets directory processing will be supported in the future. It’s really cool! ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"2 Front Matter Hugo allows you to add front matter in yaml, toml or json to your content files. Note Not all of the below front matters need to be set in each of your posts. It is necessary only if the front matters and the page part in your site configuration are inconsistent. Here is a front matter example: --- title: \"My First Post\" subtitle: \"\" date: 2020-03-04T15:58:26+08:00 lastmod: 2020-03-04T15:58:26+08:00 draft: true author: \"\" authorLink: \"\" description: \"\" license: \"\" images: [] tags: [] categories: [] featuredImage: \"\" featuredImagePreview: \"\" hiddenFromHomePage: false hiddenFromSearch: false twemoji: false lightgallery: true ruby: true fraction: true fontawesome: true linkToMarkdown: true rssFullText: false toc: enable: true auto: true code: copy: true maxShownLines: 50 math: enable: false # ... mapbox: # ... share: enable: true # ... comment: enable: true # ... library: css: # someCSS = \"some.css\" # located in \"assets/\" # Or # someCSS = \"https://cdn.example.com/some.css\" js: # someJS = \"some.js\" # located in \"assets/\" # Or # someJS = \"https://cdn.example.com/some.js\" seo: images: [] # ... --- title: the title for the content. subtitle: the subtitle for the content. date: the datetime assigned to this page, which is usually fetched from the date field in front matter, but this behaviour is configurabl in the site configuration. lastmod: the datetime at which the content was last modified. draft: if true, the content will not be rendered unless the --buildDrafts/-D flag is passed to the hugo command. author: the author for the content. authorLink: the link of the author. description: the description for the content. license: the special lisence for this content. images: page images for Open Graph and Twitter Cards. tags: the tags for the content. categories: the categories for the content. featuredImage: the featured image for the content. featuredImagePreview: the featured image for the content preview in the home page. hiddenFromHomePage: if true, the content will not be shown in the home page. hiddenFromSearch: if true, the content will not be shown in the search results. twemoji: if true, the content will enable the twemoji. lightgallery: if true, images in the content will be shown as the gallery. ruby: if true, the content will enable the ruby extended syntax. fraction: if true, the content will enable the fraction extended syntax. fontawesome: if true, the content will enable the Font Awesome extended syntax. linkToMarkdown: if true, the footer of the content will be shown the link to the orignal Markdown file. rssFullText: if true, the full text content will be shown in RSS. toc: the same as the params.page.toc part in the site configuration. code: the same as the params.page.code part in the site configuration. math: the same as the params.page.math part in the site configuration. mapbox: the same as the params.page.mapbox part in the site configuration. share: the same as the params.page.share part in the site configuration. comment: the same as the params.page.comment part in the site configuration. library: the same as the params.page.library part in the site configuration. seo: the same as the params.page.seo part in the site configuration. Tip featuredImage and featuredImagePreview support the complete usage of local resource references. If the page resource with name: featured-image or name: featured-image-preview is set in the front matter, it is not necessary to set the parameter featuredImage or featuredImagePreview: resources: - name: featured-image src: featured-image.jpg - name: featured-image-preview src: featured-image-preview.jpg ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"3 Content Summaries LoveIt theme uses the summary of the content to display abstract information in the home page. Hugo can generate summaries of your content. Summary Preview ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Automatic Summary Splitting By default, Hugo automatically takes the first 70 words of your content as its summary. You may customize the summary length by setting summaryLength in the site configuration. If you are creating content in a CJKChinese/Japanese/Korean language and want to use Hugo’s automatic summary splitting, set hasCJKLanguage to true in your site configuration. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Manual Summary Splitting Alternatively, you may add the \u003c!--more--\u003e summary divider where you want to split the article. Content that comes before the summary divider will be used as that content’s summary. Note Be careful to enter \u003c!--more--\u003e exactly; i.e., all lowercase and with no whitespace. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Front Matter Summary You might want your summary to be something other than the text that starts the article. In this case you can provide a separate summary in the summary variable of the article front matter. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Use Description as Summary You might want your description in the description variable of the article front matter as the summary. You may add the \u003c!--more--\u003e summary divider at the start of the article. Keep content that comes before the summary divider empty. Then LoveIt theme will use your description as the summary. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Priority Order of Summary Selection Because there are multiple ways in which a summary can be specified it is useful to understand the order. It is as follows: If there is a \u003c!--more--\u003e summary divider present in the article but no content is before the divider, the description will be used as the summary. If there is a \u003c!--more--\u003e summary divider present in the article the text up to the divider will be provided as per the manual summary split method. If there is a summary variable in the article front matter the value of the variable will be provided as per the front matter summary method. The text at the start of the article will be provided as per the automatic summary split method. Note It is not recommended to include rich text block elements in the summary, which will cause typographic errors. Such as code blocks, pictures, tables, etc. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"4 Basic Markdown Syntax This part is shown in the basic markdown syntax page. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"5 Extended Markdown Syntax LoveIt theme has some extended syntax elements for you to write articles. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Emoji Support This part is shown in the emoji support page. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Mathematical Formula LoveIt theme supports mathematical formulas based on $\\KaTeX$. Set the property enable = true under [params.math] in your site configuration and the property math: true of the article front matter to enable the automatic rendering of mathematical formulas. $\\KaTeX$ automatically renders formulas based on specific delimiters. Tip Here is a list of $\\TeX$ functions supported by $\\KaTeX$. Note Since Hugo generates HTML documents according to the syntax such as _/*/\u003e\u003e when rendering Markdown documents, and some text content in the form of escape characters (such as \\(/\\)/\\[/\\]/\\\\) escape processing will be performed automatically, therefore, additional escape character expressions are required for these places to achieve automatic rendering: _ -\u003e \\_ * -\u003e \\* \u003e\u003e -\u003e \\\u003e\u003e \\( -\u003e \\\\( \\) -\u003e \\\\) \\[ -\u003e \\\\[ \\] -\u003e \\\\] \\\\ -\u003e \\\\\\\\ LoveIt theme supports raw shortcode to avoid these escape characters, which helps you write raw mathematical formula content. Example raw input: Inline Formula: Block Formula: The rendered output looks like this: Inline Formula: Block Formula: Inline Formula The default inline delimiters are: $ ... $ \\( ... \\) (escaped: \\\\( ... \\\\)) For example: $c = \\pm\\sqrt{a^2 + b^2}$ and \\\\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\\\) The rendered output looks like this: $c = \\pm\\sqrt{a^2 + b^2}$ and \\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\) Block Formula The default block delimiters are: $$ ... $$ \\[ ... \\] (escaped: \\\\[ ... \\\\]) \\begin{equation} ... \\end{equation} (unnumbered: \\begin{equation*} ... \\end{equation*}) \\begin{align} ... \\end{align} (unnumbered: \\begin{align*} ... \\end{align*}) \\begin{alignat} ... \\end{alignat} (unnumbered: \\begin{alignat*} ... \\end{alignat*}) \\begin{gather} ... \\end{gather} (unnumbered: \\begin{gather*} ... \\end{gather*}) \\begin{CD} ... \\end{CD} For example: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] \\begin{equation*} \\rho \\frac{\\mathrm{D} \\mathbf{v}}{\\mathrm{D} t}=\\nabla \\cdot \\mathbb{P}+\\rho \\mathbf{f} \\end{equation*} \\begin{equation} \\mathbf{E}=\\sum_{i} \\mathbf{E}\\_{i}=\\mathbf{E}\\_{1}+\\mathbf{E}\\_{2}+\\mathbf{E}_{3}+\\cdots \\end{equation} \\begin{align} a\u0026=b+c \\\\\\\\ d+e\u0026=f \\end{align} \\begin{alignat}{2} 10\u0026x+\u00263\u0026y = 2 \\\\\\\\ 3\u0026x+\u002613\u0026y = 4 \\end{alignat} \\begin{gather} a=b \\\\\\\\ e=b+c \\end{gather} \\begin{CD} A @\u003ea\\\u003e\u003e B \\\\\\\\ @VbVV @AAcA \\\\\\\\ C @= D \\end{CD} The rendered output looks like this: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] \\begin{equation*} \\rho \\frac{\\mathrm{D} \\mathbf{v}}{\\mathrm{D} t}=\\nabla \\cdot \\mathbb{P}+\\rho \\mathbf{f} \\end{equation*} \\begin{equation} \\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots \\end{equation} \\begin{align} a\u0026=b+c \\\\ d+e\u0026=f \\end{align} \\begin{alignat}{2} 10\u0026x+\u00263\u0026y = 2 \\\\ 3\u0026x+\u002613\u0026y = 4 \\end{alignat} \\begin{gather} a=b \\\\ e=b+c \\end{gather} \\begin{CD} A @\u003ea\u003e\u003e B \\\\ @VbVV @AAcA \\\\ C @= D \\end{CD} Tip You can add more inline and block delimiters in your site configuration. Copy-tex Copy-tex is an extension for $\\KaTeX$. By the extension, when selecting and copying $\\KaTeX$ rendered elements, copies their $\\LaTeX$ source to the clipboard. Set the property copyTex = true under [params.math] in your site configuration to enable Copy-tex. Select and copy the formula rendered in the previous section, and you can find that the copied content is the $\\LaTeX$ source code. mhchem mhchem is an extension for $\\KaTeX$. By the extension, you can write beautiful chemical equations easily in the article. Set the property mhchem = true under [params.math] in your site configuration to enable mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ The rendered output looks like this: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Ruby Annotation An extended Markdown syntax for ruby annotation is supported in LoveIt theme: [Hugo]^(An open-source static site generator) The rendered output looks like this: HugoAn open-source static site generator ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Fraction An extended Markdown syntax for fraction is supported in LoveIt theme: [Light]/[Dark] [99]/[100] The rendered output looks like this: Light/Dark 90/100 ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Font Awesome LoveIt theme uses Font Awesome as the icon library. You can easily use these icons in your articles. Get the class of icons you wanted from the Font Awesome website. Gone camping! :(fas fa-campground fa-fw): Be back soon. That is so funny! :(far fa-grin-tears): The rendered output looks like this: Gone camping!  Be back soon. That is so funny! ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Escape character In some special cases (when writing this theme documentation ), your content will conflict with basic or extended Markdown syntax, and it is inevitable. The escape character syntax can help you build the content you wanted: {?X} -\u003e X For example, two : will enable emoji syntax, which is not the behavior you want. The escape character syntax is like this: {?:}joy: The rendered output looks like this: :joy: instead of 😂 Tip This is related to an issue for Hugo, which has not been resolved. Another example is: [link{?]}(#escape-character) The rendered output looks like this: [link](#escape-character) instead of link. ","date":"2020-03-05","objectID":"https://www.bardblog.cn/en/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"Theme Documentation - Content","uri":"https://www.bardblog.cn/en/theme-documentation-content/"},{"categories":["documentation"],"content":"Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean.","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean. Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities. But this happens to be a bad idea. Everyone uses Markdown because it’s pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible. To avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet that can generate reasonable HTML code and conforms to Markdown’s design philosophy. Hugo ships with a set of predefined shortcodes that represent very common usage. These shortcodes are provided for author convenience and to keep your markdown content clean. ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:0:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"1 figure Documentation of figure Example figure input: {{\u003c figure src=\"/images/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} The rendered output looks like this: Lighthouse (figure) The HTML looks like this: \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.jpg\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:1:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"2 gist Documentation of gist Example gist input: {{\u003c gist spf13 7896402 \u003e}} The rendered output looks like this: The HTML looks like this: \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\"\u003e\u003c/script\u003e ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:2:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"3 highlight Documentation of highlight Example highlight input: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} The rendered output looks like this: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:3:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"4 instagram Documentation of instagram Instagram’s API was deprecated since October 24th, 2020 The instagram-shortcode refers an endpoint of Instagram’s API, that’s deprecated since October 24th, 2020. Thus, no images can be fetched from this API endpoint, resulting in an error when the instagram-shortcode is used. For more information please have a look at GitHub issue #7879. ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:4:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"5 param Documentation of param Example param input: {{\u003c param description \u003e}} The rendered output looks like this: Hugo provides multiple built-in shortcodes for author convenience and to keep your markdown content clean. ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:5:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"6 ref and relref Documentation of ref and relref ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:6:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"7 tweet Documentation of tweet Example tweet input: {{\u003c tweet 917359331535966209 \u003e}} The rendered output looks like this: Reminder: This Twitter account is not actively maintained for questions. Please post all questions on https://t.co/yAzbBojxaU #gohugo — GoHugo.io (@GoHugoIO) October 9, 2017 ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:7:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"8 vimeo Documentation of vimeo Example vimeo input: {{\u003c vimeo 146022717 \u003e}} The rendered output looks like this: ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:8:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"9 youtube Documentation of youtube Example youtube input: {{\u003c youtube w7Ft2ymGmfc \u003e}} The rendered output looks like this: ","date":"2020-03-04","objectID":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/:9:0","tags":["shortcodes"],"title":"Theme Documentation - Built-in Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-built-in-shortcodes/"},{"categories":["technology"],"content":"Three types of factory patterns","date":"2023-06-26","objectID":"https://www.bardblog.cn/en/desigin-pattern-factory/","tags":["design-pattern"],"title":"Factory Pattern","uri":"https://www.bardblog.cn/en/desigin-pattern-factory/"},{"categories":["technology"],"content":"The Factory Method pattern is a creational design pattern that provides a way to delegate the creation of objects to subclasses. In the Factory Method pattern, an abstract factory class defines an interface for creating objects, but the specific object creation is deferred to the subclasses. ","date":"2023-06-26","objectID":"https://www.bardblog.cn/en/desigin-pattern-factory/:0:0","tags":["design-pattern"],"title":"Factory Pattern","uri":"https://www.bardblog.cn/en/desigin-pattern-factory/"},{"categories":["technology"],"content":"Simple Factory Pattern The Simple Factory pattern, also known as the Static Method pattern, defines a static method in the object creation factory class to create objects. The Simple Factory design pattern allows clients (users) to create the desired product instances without knowing the specific details of the objects. Users can directly use the created objects without worrying about how they are created. Class Diagram: Simple Factory Pattern Code: package main import \"fmt\" type Animal interface { eat() weight() int } type Dog struct { } func (d *Dog) eat() { fmt.Println(\"dog eat !\") } func (d *Dog) weight() int { return 30 } type Cat struct { } func (c *Cat) eat() { fmt.Println(\"cat eat!\") } func (c *Cat) weight() int { return 10 } type AnimalFactory struct { } func (a *AnimalFactory) newAnimal(animalType int) Animal { switch animalType { case 0: return \u0026Dog{} case 1: return \u0026Cat{} default: return nil } } func main() { factory := new(AnimalFactory) dog := factory.newAnimal(0) dog.eat() fmt.Println(dog.weight()) cat := factory.newAnimal(1) cat.eat() fmt.Println(cat.weight()) } As you can see, the Simple Factory pattern is quite simple. It separates the creation and usage of instances, allowing the users to create objects without knowing the details of the objects’ creation process. It achieves separation and decoupling, where users only need to know the type mapping of the objects they want to create. However, what are the drawbacks of the Simple Factory pattern? When producing objects, the specific animal object to be created is determined based on the animal type passed in. As we add more animal types, such as rabbits or elephants, the newAnimal method will expand continuously. Moreover, whenever the animal types change, we have to modify this part of the code, which violates the Open-Closed Principle. So, how can we address this issue? We can’t really say that it solves the problem completely, but it can be considered as a programming technique. We can observe that the newAnimal method contains a lot of switch cases. How can we get rid of these switch cases? In the main function, when we need to create a specific animal object, we need to pass the animalType field and then call the newAnimal method to create the object. In other words, we create the object only when we need to use a certain animal object, which follows a “lazy loading” approach. If we create an instance of each animal whenever we add a new animal, and then put it into a map dictionary, we can simply fetch the object from the map without maintaining the newAnimal method. In essence, it transforms the “lazy loading” approach into an “eager loading” approach. Regardless of whether you use the object or not, if the object exists, we create an object instance and put it into the map dictionary. The code can be modified as follows: Code: package main import \"fmt\" // Eager loading, register into the factory map func init() { Register(0, \u0026Dog{}) Register(1, \u0026Cat{}) } type Animal interface { eat() weight() int } type Dog struct { } func (d *Dog) eat() { fmt.Println(\"dog eat !\") } func (d *Dog) weight() int { return 30 } type Cat struct { } func (c *Cat) eat() { fmt.Println(\"cat eat!\") } func (c *Cat) weight() int { return 10 } type AnimalFactory struct { } func Register(animalType int, animal Animal) { animals[animalType] = animal } func Get(animalType int) Animal { a, ok := animals[animalType] if !ok { return nil } return a } var animals = make(map[int]Animal) // animal type =\u003e Animal func main() { dog := Get(0) dog.eat() fmt.Println(dog.weight()) cat := Get(1) cat.eat() fmt.Println(cat.weight()) } ","date":"2023-06-26","objectID":"https://www.bardblog.cn/en/desigin-pattern-factory/:1:0","tags":["design-pattern"],"title":"Factory Pattern","uri":"https://www.bardblog.cn/en/desigin-pattern-factory/"},{"categories":["technology"],"content":"Factory Method Pattern The Factory Method pattern, also known as the Polymorphic Factory pattern, is an upgraded version of the Simple Factory pattern. In the previous explanation, we discussed the Simple Factory pattern, where different types of animals, such as dogs and cats, were produced by the same animal factory. However, every time a new animal species is added, the animal factory needs to be modified accordingly. It’s like needing to add matching tools every time a new animal species is produced, which is not very scalable. The Factory Method pattern can be seen as an improvement to the Simple Factory pattern, where different types of animals are no longer produced by the same animal factory. Instead, the production is further divided, and each type of animal has its own dedicated animal factory. Let’s take the example of cars. Class Diagram: Factory Method Pattern Code: package main import \"fmt\" // Car abstract interface for cars, defining two behaviors: drive and refuel type Car interface { drive() refuel(cnt int) } // Bmw BMW car type Bmw struct { } func (b *Bmw) drive() { fmt.Println(\"I'm driving a BMW!\") } func (b *Bmw) refuel(cnt int) { fmt.Println(\"Adding\", cnt, \"liters of fuel to the BMW\") } // Benz Benz car type Benz struct { } func (b *Benz) drive() { fmt.Println(\"I'm driving a Benz!\") } func (b *Benz) refuel(cnt int) { fmt.Println(\"Adding\", cnt, \"liters of fuel to the Benz\") } // CarFactory interface for car factories, responsible for car production type CarFactory interface { makeCar() Car } // BmwFactory BMW car factory, producing BMW cars type BmwFactory struct { } func (b *BmwFactory) makeCar() Car { return new(Bmw) } // BenzFactory Benz car factory, producing Benz cars type BenzFactory struct { } func (b *BenzFactory) makeCar() Car { return new(Benz) } func main() { bmwFactory := new(BmwFactory) bmw := bmwFactory.makeCar() bmw.drive() bmw.refuel(1) benzFactory := new(BenzFactory) benz := benzFactory.makeCar() benz.drive() benz.refuel(2) } In summary, let’s highlight the advantages and disadvantages of the Factory Method pattern: Advantages: Good scalability: When a new product (e.g., adding an Audi car) needs to be added, there is no need to modify the abstract factory or the interface provided by the abstract factory. Only a specific factory and product need to be added. This approach aligns with the “Open-Closed Principle.” In contrast, the Simple Factory pattern requires modification of the factory class’s conditional logic. Adheres to the Single Responsibility Principle: Each specific factory class is only responsible for producing the corresponding product. The Simple Factory pattern’s factory class requires additional logical checks. The key to the Factory Method pattern lies in the polymorphism design based on the factory and product roles. It allows the factory to independently determine which product object to create (the product’s factory class only needs to implement the abstract factory interface). The details of how to create the object are completely encapsulated within the specific factory. The Factory Method pattern is also referred to as the “Polymorphic Factory” pattern because all specific factory classes have the same abstract parent class. Disadvantages: Every time a new product is added, new concrete product classes need to be written, along with providing the corresponding factory classes,When the number of products in the system becomes large, the number of classes increases exponentially, resulting in increased system complexity. Additionally, multiple classes need to be compiled and executed, which adds to the system’s overhead. A specific factory class can only create one specific product. ","date":"2023-06-26","objectID":"https://www.bardblog.cn/en/desigin-pattern-factory/:2:0","tags":["design-pattern"],"title":"Factory Pattern","uri":"https://www.bardblog.cn/en/desigin-pattern-factory/"},{"categories":["technology"],"content":"Abstract Factory Pattern The Abstract Factory pattern can be understood as a factory of factories, where there is a super factory that produces other factories. As Marx said, “Man is the sum of all social relations.” A person cannot play only one role in society. A person’s occupation could be a programmer, and they also have corresponding family roles. Likewise, a programmer could specialize in languages such as Go, Java, or Python, and their family roles could be a father, son, or husband. Together, these roles constitute the sum of social relations. The Abstract Factory pattern can be seen as a combination of the Simple Factory pattern and the Factory Method pattern. It inherits their respective advantages and disadvantages. Class Diagram: Abstract Factory Pattern Code: package main import \"fmt\" type programmer interface { writeCode() } type javaProgrammer struct { } func (j *javaProgrammer) writeCode() { fmt.Println(\"I am a Java programmer. I write Java.\") } type goProgrammer struct { } func (g *goProgrammer) writeCode() { fmt.Println(\"I am a Golang programmer. I write Go.\") } type family interface { love() } type father struct { } func (f *father) love() { fmt.Println(\"I am a father. I love my wife and my son.\") } type son struct { } func (s *son) love() { fmt.Println(\"I am a son. I love my father and my mother.\") } type programmerFactory struct { } func (p *programmerFactory) getProgrammer(programmerType int) programmer { switch programmerType { case 0: return new(javaProgrammer) case 1: return new(goProgrammer) default: return nil } } func (p *programmerFactory) getFamily(roleType int) family { return nil } type familyFactory struct { } func (f *familyFactory) getFamily(roleType int) family { switch roleType { case 0: return new(father) case 1: return new(son) default: return nil } } func (f *familyFactory) getProgrammer(programmerType int) programmer { return nil } type abstractHumanFactory interface { getFamily(roleType int) family getProgrammer(programmerType int) programmer } type factoryProducer struct { } func (*factoryProducer) getFactory(factoryType int) abstractHumanFactory { switch factoryType { case 0: return new(programmerFactory) case 1: return new(familyFactory) default: return nil } } func main() { fac := new(factoryProducer) programmerFac := fac.getFactory(0) java := programmerFac.getProgrammer(0) java.writeCode() golang := programmerFac.getProgrammer(1) golang.writeCode() familyFac := fac.getFactory(1) f := familyFac.getFamily(0) f.love() s := familyFac.getFamily(1) s.love() } ","date":"2023-06-26","objectID":"https://www.bardblog.cn/en/desigin-pattern-factory/:3:0","tags":["design-pattern"],"title":"Factory Pattern","uri":"https://www.bardblog.cn/en/desigin-pattern-factory/"},{"categories":["technology"],"content":"Summary The Factory pattern is the simplest and most easily understandable design pattern, and it is widely used in daily development. It can be roughly divided into three types. Correctly using design patterns in our code can greatly simplify the code, reduce code coupling, and improve maintainability (after all, it is a summary of previous experiences). However, it is essential to avoid the misuse of design patterns. Improper use can have adverse effects. Don’t use design patterns just for the sake of using them! ","date":"2023-06-26","objectID":"https://www.bardblog.cn/en/desigin-pattern-factory/:4:0","tags":["design-pattern"],"title":"Factory Pattern","uri":"https://www.bardblog.cn/en/desigin-pattern-factory/"},{"categories":["technology"],"content":"Solving connected components problem using Depth-First Search","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-bfs-acwing-844/","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-bfs-acwing-844/"},{"categories":["technology"],"content":"Problem Description Given an n×m 2D integer array representing a maze, where the array contains only 0s and 1s, with 0 representing a path that can be traversed and 1 representing an impassable wall. Initially, there is a person at the top-left corner (1, 1). It is known that the person can move one position in any direction: up, down, left, or right. The task is to determine the minimum number of moves required for the person to reach the bottom-right corner (n, m). It is guaranteed that the numbers at the top-left corner (1, 1) and the bottom-right corner (n, m) are both 0, and there is at least one valid path. Input Format The first line contains two integers, n and m. The next n lines contain m integers (0 or 1), representing the complete 2D array maze. Output Format Print a single integer, representing the minimum number of moves required to reach the bottom-right corner from the top-left corner. Constraints 1 ≤ n, m ≤ 100 Input Example: 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 Output Example: 8 ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-bfs-acwing-844/:1:0","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-bfs-acwing-844/"},{"categories":["technology"],"content":"Approach This is a typical shortest path problem. We can use breadth-first search (BFS) to traverse the path from the start to the end, while keeping track of the minimum number of moves. ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-bfs-acwing-844/:2:0","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-bfs-acwing-844/"},{"categories":["technology"],"content":"Code Implementation package main import \"fmt\" const N = 101 func main() { var n, m int fmt.Scanf(\"%d%d\", \u0026n, \u0026m) nums := make([][]int, n) d := make([][]int, n) for i := 0; i \u003c n; i++ { nums[i] = make([]int, m) d[i] = make([]int, m) for j := 0; j \u003c m; j++ { var tmp int fmt.Scanf(\"%d\", \u0026tmp) nums[i][j] = tmp d[i][j] = -1 } } fmt.Println(bfs(nums, d, newQueue(N*N))) } func bfs(nums, d [][]int, q *queue) int { n, m := len(nums), len(nums[0]) d[0][0] = 0 dx := [4]int{-1, 0, 1, 0} dy := [4]int{0, 1, 0, -1} q.push(\u0026pair{0, 0}) for !q.isEmpty() { t := q.pop() for i := 0; i \u003c 4; i++ { // Check four directions: up, down, left, right x, y := t.x+dx[i], t.y+dy[i] // Next position from the current position if x \u003e= 0 \u0026\u0026 x \u003c n \u0026\u0026 y \u003e= 0 \u0026\u0026 y \u003c m \u0026\u0026 nums[x][y] == 0 \u0026\u0026 d[x][y] == -1 { d[x][y] = d[t.x][t.y] + 1 q.push(\u0026pair{x, y}) } } } return d[n-1][m-1] } type pair struct { x int y int } type queue struct { elements []*pair begin int end int } func newQueue(n int) *queue { return \u0026queue{ elements: make([]*pair, n), begin: 0, end: -1, } } func (q *queue) push(p *pair) { q.end += 1 q.elements[q.end] = p } func (q *queue) pop() *pair { res := q.elements[q.begin] q.elements[q.begin] = nil q.begin += 1 return res } func (q *queue) isEmpty() bool { return q.end \u003c q.begin } ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-bfs-acwing-844/:3:0","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-bfs-acwing-844/"},{"categories":["technology"],"content":"Solving connected components problem using Depth-First Search","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/"},{"categories":["technology"],"content":"Problem Description Given a tree with n nodes (numbered 1 to n) and n-1 undirected edges. Please find the centroid of the tree and output the maximum number of nodes in each remaining connected component after removing the centroid. Centroid Definition: The centroid of a tree is a node such that if it is removed, the maximum number of nodes in each remaining connected component is minimized. ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/:1:0","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/"},{"categories":["technology"],"content":"Input Format The first line contains an integer n, representing the number of nodes in the tree. The next n-1 lines contain two integers a and b each, representing an edge between nodes a and b. ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/:2:0","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/"},{"categories":["technology"],"content":"Output Format Output an integer m, representing the maximum number of nodes in each remaining connected component after removing the centroid. ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/:3:0","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/"},{"categories":["technology"],"content":"Constraints 1 ≤ n ≤ 105 Sample Input: 9 1 2 1 7 1 4 2 8 2 5 4 3 3 9 4 6 ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/:4:0","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/"},{"categories":["technology"],"content":"Approach ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/:5:0","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/"},{"categories":["technology"],"content":"Code Implementation ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/:6:0","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/"},{"categories":["technology"],"content":"Code 1 package main import ( \"bufio\" \"fmt\" \"os\" \"strconv\" \"strings\" ) func main() { var n int fmt.Scanf(\"%d\", \u0026n) son := make(map[int]*listNode) used := make([]bool, n+1) scanner := bufio.NewScanner(os.Stdin) buf := make([]byte, 2000*1000) scanner.Buffer(buf, len(buf)) for i := 0; i \u003c n-1; i++ { scanner.Scan() ss := strings.Split(scanner.Text(), \" \") var a, b int a, _ = strconv.Atoi(ss[0]) b, _ = strconv.Atoi(ss[1]) add1(son, used, a, b) } res := n dfs1(son, n, 1, \u0026res, make([]bool, n+1)) fmt.Println(res) } func dfs1(mp map[int]*listNode, n, t int, res *int, visited []bool) int { visited[t] = true tmp := 0 sum := 1 for h := mp[t]; h != nil; h = h.next { if !visited[h.val] { s := dfs1(mp, n, h.val, res, visited) tmp = max(tmp, s) sum += s } } tmp = max(tmp, n-sum) *res = min(*res, tmp) return sum } func max(a, b int) int { if a \u003c b { return b } return a } func min(a, b int) int { if a \u003c b { return a } return b } // add1 constructs the graph // son: stores the child nodes for each node with key k // used: tracks whether node b has been used as a child node of any node // Since a node can only be a child node of one node, if node b was a child node before, then at this moment, node b is the parent node of node a, and node a is the child node of node b func add1(son map[int]*listNode, used []bool, a, b int) { if !used[b] { newNode := \u0026listNode{val: b, next: son[a]} son[a] = newNode used[b] = true } else { newNode := \u0026listNode {val: a, next: son[b]} son[b] = newNode } } type listNode struct { val int next *listNode } ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/:6:1","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/"},{"categories":["technology"],"content":"Code 2 package main import ( \"bufio\" \"fmt\" \"os\" \"strconv\" \"strings\" ) func main() { var n int fmt.Scanf(\"%d\", \u0026n) h, c, ne := make([]int, n+1), make([]int, 2*n+1), make([]int, 2*n+1) for i := 0; i \u003c= n; i++ { h[i] = -1 } idx := 0 visited := make([]bool, n+1) scanner := bufio.NewScanner(os.Stdin) buf := make([]byte, 20000*1000) scanner.Buffer(buf, len(buf)) for i := 0; i \u003c n-1; i++ { scanner.Scan() s := scanner.Text() ss := strings.Split(s, \" \") var a, b int a, _ = strconv.Atoi(ss[0]) b, _ = strconv.Atoi(ss[1]) add2(h, c, ne, a, b, \u0026idx) add2(h, c, ne, b, a, \u0026idx) } res := n dfs2(h, c, ne, n, 1, visited, \u0026res) fmt.Println(res) } func dfs2(h, c, ne []int, n, t int, visited []bool, res *int) int { visited[t] = true sum := 1 tmp := 0 for i := h[t]; i != -1; i = ne[i] { if !visited[c[i]] { s := dfs2(h, c, ne, n, c[i], visited, res) sum += s tmp = max(tmp, s) } } tmp = max(tmp, n-sum) *res = min(*res, tmp) return sum } // Build the connection graph // Reference: https://www.acwing.com/file_system/file/content/whole/index/content/4446359/ func add2(h, c, ne []int, p, s int, idx *int) { c[*idx] = s ne[*idx] = h[p] h[p] = *idx *idx += 1 } ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/:6:2","tags":["algorithm","bfs"],"title":"Maximum Size of Connected Components","uri":"https://www.bardblog.cn/en/algorithm-dfs-acwing-846/"},{"categories":["documentation"],"content":"LoveIt theme provides multiple shortcodes on top of built-in ones in Hugo.","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"LoveIt theme provides multiple shortcodes on top of built-in ones in Hugo. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"1 style Note Hugo extended version is necessary for style shortcode. style is a shortcode to insert custom style in your post. The style shortcode has two positional parameters. The first one is the custom style content, which supports nesting syntax in  SASS and \u0026 referring to this parent HTML element. And the second one is the tag name of the HTML element wrapping the content you want to change style, and whose default value is div. Example style input: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} The rendered output looks like this: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"2 link link shortcode is an alternative to Markdown link syntax. link shortcode can provide some other features and can be used in code blocks. The complete usage of local resource references is supported. The link shortcode has the following named parameters: href [required] (first positional parameter) Destination of the link. content [optional] (second positional parameter) Content of the link, default value is the value of href parameter. Markdown or HTML format is supported. title [optional] (third positional parameter) title attribute of the HTML a tag, which will be shown when hovering on the link. class [optional] class attribute of the HTML a tag. rel [optional] Additional rel attributes of the HTML a tag. Example link input: {{\u003c link \"https://assemble.io\" \u003e}} Or {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} Or {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} Or {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} The rendered output looks like this: https://assemble.io mailto:contact@revolunet.com Assemble Example link input with a title: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} Or {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} The rendered output looks like this (hover over the link, there should be a tooltip): Upstage ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"3 image image shortcode is an alternative to figure shortcode. image shortcode can take full advantage of the dependent libraries of lazysizes and lightGallery. The complete usage of local resource references is supported. The image shortcode has the following named parameters: src [required] (first positional parameter) URL of the image to be displayed. alt [optional] (second positional parameter) Alternate text for the image if the image cannot be displayed, default value is the value of src parameter. Markdown or HTML format is supported. caption [optional] (third positional parameter) Image caption. Markdown or HTML format is supported. title [optional] Image title that will be shown when hovering on the image. class [optional] class attribute of the HTML figure tag. src_s [optional] URL of the image thumbnail, used for lightgallery, default value is the value of src parameter. src_l [optional] URL of the HD image, used for lightgallery, default value is the value of src parameter. height [optional] height attribute of the image. width [optional] width attribute of the image. linked [optional] Whether the image needs to be hyperlinked, default value is true. rel [optional] Additional rel attributes of the HTML a tag, if linked parameter is set to true. Example image input: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} The rendered output looks like this: Lighthouse (image) ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"4 admonition The admonition shortcode supports 12 types of banners to help you put notice in your page. Markdown or HTML format in the content is supported. Note A note banner Abstract An abstract banner Info A info banner Tip A tip banner Success A success banner Question A question banner Warning A warning banner Failure A failure banner Danger A danger banner Bug A bug banner Example An example banner Quote A quote banner The admonition shortcode has the following named parameters: type [optional] (first positional parameter) Type of the admonition banner, default value is note. title [optional] (second positional parameter) Title of the admonition banner, default value is the value of type parameter. open [optional] (third positional parameter) Whether the content will be expandable by default, default value is true. Example admonition input: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} Or {{\u003c admonition tip \"This is a tip\" false \u003e}} A **tip** banner {{\u003c /admonition \u003e}} The rendered output looks like this: This is a tip A tip banner ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5 mermaid The mermaid shortcode supports diagrams in Hugo with Mermaid library. The full documentation is provided in Theme Documentation - mermaid Shortcode. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"6 echarts The echarts shortcode supports data visualization in Hugo with ECharts library. The full documentation is provided in Theme Documentation - echarts Shortcode. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"7 mapbox The mapbox shortcode supports interactive maps in Hugo with Mapbox GL JS library. The full documentation is provided in Theme Documentation - mapbox Shortcode. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8 music The music shortcode embeds a responsive music player based on APlayer and MetingJS library. The full documentation is provided in Theme Documentation - music Shortcode. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"9 bilibili The bilibili shortcode embeds a responsive video player for bilibili videos. The full documentation is provided in Theme Documentation - bilibili Shortcode. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10 typeit The typeit shortcode provides typing animation based on TypeIt library. The full documentation is provided in Theme Documentation - typeit Shortcode. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"11 script script is a shortcode to insert custom  Javascript in your post. Note The script content can be guaranteed to be executed in order after all third-party libraries are loaded. So you are free to use third-party libraries. Example script input: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} You can see the output in the console of the developer tool. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"12 raw raw is a shortcode to insert raw  HTML content in your post. This is useful when you want to include some Markdown content to avoid being rendered or escaped by Hugo. Example raw input: Inline Formula: {{\u003c raw \u003e}}\\(\\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots\\){{\u003c /raw \u003e}} Block Formula: {{\u003c raw \u003e}} \\[ a=b+c \\\\ d+e=f \\] {{\u003c /raw \u003e}} Raw content using Markdown syntax: {{\u003c raw \u003e}}**Hello**{{\u003c /raw \u003e}} The rendered output looks like this: Inline Formula: Block Formula: This renders as  Dillon. Raw content using Markdown syntax: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:12:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"13 person person is a shortcode to insert a link to a personal webpage marked up as h-card. The person shortcode has the following named parameters: url [required] (first positional parameter) URL of the personal page. name [required] (second positional parameter) Name of the person. text [optional] (third positional parameter) Text to display as hover tooltip of the link. picture [optional] (fourth positional parameter) A picture to use as person’s avatar. nick [optional] Nickame of the person. Example person input: {{\u003c person url=\"https://evgenykuznetsov.org\" name=\"Evgeny Kuznetsov\" nick=\"nekr0z\" text=\"author of this shortcode\" picture=\"https://evgenykuznetsov.org/img/avatar.jpg\" \u003e}} This renders as  Evgeny Kuznetsov (nekr0z). Without an explicitly given picture, a generic icon is used. This input: {{\u003c person \"https://www.bardblog.cn/\" Dillon \"author of the LoveIt theme\" \u003e}} This renders as  Dillon. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/:13:0","tags":["shortcodes"],"title":"Theme Documentation - Extended Shortcodes","uri":"https://www.bardblog.cn/en/theme-documentation-extended-shortcodes/"},{"categories":["Markdown"],"content":"This article shows the basic Markdown syntax and format.","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page. If you want to know about the extended Markdown syntax of LoveIt theme, please read extended Markdown syntax page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 Emphasis ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 Lists ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 Code ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 Links ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] The Dojocat With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" Tip LoveIt theme has special shortcode for image, which provides more features. This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2019-12-01","objectID":"https://www.bardblog.cn/en/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Basic Markdown Syntax","uri":"https://www.bardblog.cn/en/basic-markdown-syntax/"},{"categories":["technology"],"content":"Solving interval merging problem using Greedy algorithm","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-greedy-disjoint/","tags":["algorithm","greed"],"title":"Maximum Non-overlapping Intervals","uri":"https://www.bardblog.cn/en/algorithm-greedy-disjoint/"},{"categories":["technology"],"content":"Problem Description Given N closed intervals [ai, bi], you need to select a subset of intervals on the number line such that the selected intervals do not overlap with each other (including the endpoints). Output the maximum number of intervals that can be selected. Input Format The first line contains an integer N, representing the number of intervals. The next N lines contain two integers ai and bi each, representing the endpoints of an interval. Output Format Output an integer representing the maximum number of non-overlapping intervals that can be selected. Constraints 1 ≤ N ≤ 105, -109 ≤ ai ≤ bi ≤ 109 Sample Input: 3 -1 1 2 4 3 5 Sample Output: 2 ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-greedy-disjoint/:1:0","tags":["algorithm","greed"],"title":"Maximum Non-overlapping Intervals","uri":"https://www.bardblog.cn/en/algorithm-greedy-disjoint/"},{"categories":["technology"],"content":"Code Implementation package main import ( \"bufio\" \"fmt\" \"os\" \"sort\" \"strconv\" \"strings\" ) func main() { var n int fmt.Scanf(\"%d\", \u0026n) scanner := bufio.NewScanner(os.Stdin) buf := make([]byte, 2000*1024) scanner.Buffer(buf, len(buf)) points := make([][]int, n) for i := 0; i \u003c n; i++ { scanner.Scan() strList := strings.Split(scanner.Text(), \" \") a, _ := strconv.Atoi(strList[0]) b, _ := strconv.Atoi(strList[1]) points[i] = []int{a, b} } sort.Slice(points, func(i, j int) bool { return points[i][1] \u003c points[j][1] }) cnt := 1 rightPoint := points[0][1] for i := 1; i \u003c n; i++ { if points[i][0] \u003e rightPoint { cnt++ rightPoint = points[i][1] } } fmt.Println(cnt) } ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-greedy-disjoint/:2:0","tags":["algorithm","greed"],"title":"Maximum Non-overlapping Intervals","uri":"https://www.bardblog.cn/en/algorithm-greedy-disjoint/"},{"categories":["technology"],"content":"Proof First, sort the original intervals in ascending order of their right endpoints. For the first interval, select its right endpoint. Starting from the second interval, check if there is an intersection between the current interval and the previous intervals. If there is an intersection, merge the two intervals (rightPoint is the minimum right endpoint before merging); otherwise, increment the count of non-overlapping intervals. For the k-th interval, if the current interval does not intersect with any of the previous intervals (if the left endpoint of the current interval is greater than the minimum right endpoint of the previous intervals), increment the count of non-overlapping intervals by 1. ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/algorithm-greedy-disjoint/:3:0","tags":["algorithm","greed"],"title":"Maximum Non-overlapping Intervals","uri":"https://www.bardblog.cn/en/algorithm-greedy-disjoint/"},{"categories":["documentation"],"content":"The mermaid shortcode supports diagrams in Hugo with Mermaid library.","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":" The mermaid shortcode supports diagrams in Hugo with Mermaid library. Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown. Just insert your mermaid code in the mermaid shortcode and that’s it. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:0:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Flowchart Example flowchart mermaid input: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:1:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Sequence Diagram Example sequence diagram mermaid input: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:2:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Gantt Example Gantt mermaid input: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:3:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Class Diagram Example class diagram mermaid input: {{\u003c mermaid \u003e}} classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:4:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"State Diagram Example state diagram mermaid input: {{\u003c mermaid \u003e}} stateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:5:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Git Graph Example git graph mermaid input: {{\u003c mermaid \u003e}} gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:6:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Entity Relationship Diagram Example entity-relationship diagram mermaid input: {{\u003c mermaid \u003e}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:7:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"User Journey Example user journey mermaid input: {{\u003c mermaid \u003e}} journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:8:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Pie Chart Example pie chart mermaid input: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:9:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Requirement Diagram Example requirement diagram mermaid input: {{\u003c mermaid \u003e}} requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -\u003e test_req {{\u003c /mermaid \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/:10:0","tags":["shortcodes"],"title":"Theme Documentation - mermaid Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mermaid-shortcode/"},{"categories":["Markdown"],"content":"Guide to emoji usage in Hugo and LoveIt.","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Emoji can be enabled in a Hugo project in a number of ways. The emojify function can be called directly in templates or Inline Shortcodes. To enable emoji globally, set enableEmoji to true in your site configuration and then you can type emoji shorthand codes directly in content files. These begin and end with a colon and include the code of an emoji: Gone camping! :tent: Be back soon. That is so funny! :joy: The rendered output looks like this: Gone camping! ⛺ Be back soon. That is so funny! 😂 The following cheat sheet is a useful reference for emoji shorthand codes. ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:0:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Smileys \u0026 Emotion ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Smiling icon code icon code 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:1","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Affection icon code icon code 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:2","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Tongue icon code icon code 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:3","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Hand icon code icon code 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:4","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Neutral Skeptical icon code icon code 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:5","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Sleepy icon code icon code 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:6","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Unwell icon code icon code 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:7","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Hat icon code icon code 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:8","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Glasses icon code icon code 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:9","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Concerned icon code icon code 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:10","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Negative icon code icon code 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:11","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Face Costume icon code icon code 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:12","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Cat Face icon code icon code 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:13","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Monkey Face icon code icon code 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:14","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Emotion icon code icon code 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:1:15","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"People \u0026 Body ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Hand Fingers Open icon code icon code 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:1","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Hand Fingers Partial icon code icon code 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:2","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Hand Single Finger icon code icon code 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:3","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Hand Fingers Closed icon code icon code 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:4","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Hands icon code icon code 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:5","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Hand Prop icon code icon code ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:6","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Body Parts icon code icon code 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:7","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Person icon code icon code 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:8","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Person Gesture icon code icon code 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇 bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:9","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Person Role icon code icon code 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:10","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Person Fantasy icon code icon code 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:11","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Person Activity icon code icon code 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:12","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Person Sport icon code icon code 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:13","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Person Resting icon code icon code 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:14","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Family icon code icon code 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 💑 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:15","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Person Symbol icon code icon code 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:2:16","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Animals \u0026 Nature ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:3:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Animal Mammal icon code icon code 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:3:1","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Animal Bird icon code icon code 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:3:2","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Animal Amphibian icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:3:3","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Animal Reptile icon code icon code 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:3:4","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Animal Marine icon code icon code 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:3:5","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Animal Bug icon code icon code 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:3:6","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Plant Flower icon code icon code 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:3:7","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Plant Other icon code icon code 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:3:8","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Food \u0026 Drink ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:4:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Food Fruit icon code icon code 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:4:1","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Food Vegetable icon code icon code 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:4:2","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Food Prepared icon code icon code 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:4:3","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Food Asian icon code icon code 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:4:4","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Food Marine icon code icon code 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:4:5","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Food Sweet icon code icon code 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:4:6","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Drink icon code icon code 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:4:7","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Dishware icon code icon code 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:4:8","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Travel \u0026 Places ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Place Map icon code icon code 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:1","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Place Geographic icon code icon code 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:2","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Place Building icon code icon code 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:3","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Place Religious icon code icon code ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:4","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Place Other icon code icon code ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:5","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Transport Ground icon code icon code 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:6","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Transport Water icon code icon code ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:7","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Transport Air icon code icon code ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:8","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Hotel icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:9","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Time icon code icon code ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:10","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Sky \u0026 Weather icon code icon code 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:5:11","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Activities ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:6:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Event icon code icon code 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:6:1","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Award Medal icon code icon code 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:6:2","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Sport icon code icon code ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:6:3","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Game icon code icon code 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:6:4","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Arts \u0026 Crafts icon code icon code 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:6:5","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Objects ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Clothing icon code icon code 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:1","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Sound icon code icon code 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:2","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Music icon code icon code 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:3","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Musical Instrument icon code icon code 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:4","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Phone icon code icon code 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:5","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Computer icon code icon code 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:6","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Light \u0026 Video icon code icon code 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:7","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Book Paper icon code icon code 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:8","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Money icon code icon code 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:9","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Mail icon code icon code ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:10","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Writing icon code icon code ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:11","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Office icon code icon code 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:12","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Lock icon code icon code 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:13","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Tool icon code icon code 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:14","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Science icon code icon code ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:15","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Medical icon code icon code 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:16","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Household icon code icon code 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:17","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Other Object icon code icon code 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:7:18","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Symbols ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Transport Sign icon code icon code 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:1","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Warning icon code icon code ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:2","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Arrow icon code icon code ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:3","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Religion icon code icon code 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:4","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Zodiac icon code icon code ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:5","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Av Symbol icon code icon code 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:6","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Math icon code icon code ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:7","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Punctuation icon code icon code ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:8","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Currency icon code icon code 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:9","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Keycap icon code icon code #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:10","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Alphabet icon code icon code 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:11","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Geometric icon code icon code 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:12","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Other Symbol icon code icon code ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:8:13","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Flags ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:9:0","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Common Flags icon code icon code 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:9:1","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["Markdown"],"content":"Country and Region Flags icon code icon code 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"https://www.bardblog.cn/en/emoji-support/:9:2","tags":["emoji"],"title":"Emoji Support","uri":"https://www.bardblog.cn/en/emoji-support/"},{"categories":["documentation"],"content":"The echarts shortcode supports data visualization in Hugo with ECharts library.","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-echarts-shortcode/","tags":["shortcodes"],"title":"Theme Documentation - echarts Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-echarts-shortcode/"},{"categories":["documentation"],"content":"The echarts shortcode supports data visualization in Hugo with ECharts library. ECharts is a library helping you to generate interactive data visualization. The basic chart types ECharts supports include line series, bar series, scatter series, pie charts, candle-stick series, boxplot series for statistics, map series, heatmap series, lines series for directional information, graph series for relationships, treemap series, sunburst series, parallel series for multi-dimensional data, funnel series, gauge series. And it’s extremely easy to create a combinition of them with ECharts. Just insert your ECharts option in JSON/YAML/TOML format in the echarts shortcode and that’s it. Example echarts input in JSON format: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"Summary Line Chart\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"Save as Image\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"Email Marketing\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"Affiliate Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"Video Advertising\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"Direct View\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"Search Engine\", \"type\": \"line\", \"stack\": \"Total\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} The same in YAML format: {{\u003c echarts \u003e}} title: text: Summary Line Chart top: 2% left: center tooltip: trigger: axis legend: data: - Email Marketing - Affiliate Advertising - Video Advertising - Direct View - Search Engine top: 10% grid: left: 5% right: 5% bottom: 5% top: 20% containLabel: true toolbox: feature: saveAsImage: title: Save as Image xAxis: type: category boundaryGap: false data: - Monday - Tuesday - Wednesday - Thursday - Friday - Saturday - Sunday yAxis: type: value series: - name: Email Marketing type: line stack: Total data: - 120 - 132 - 101 - 134 - 90 - 230 - 210 - name: Affiliate Advertising type: line stack: Total data: - 220 - 182 - 191 - 234 - 290 - 330 - 310 - name: Video Advertising type: line stack: Total data: - 150 - 232 - 201 - 154 - 190 - 330 - 410 - name: Direct View type: line stack: Total data: - 320 - 332 - 301 - 334 - 390 - 330 - 320 - name: Search Engine type: line stack: Total data: - 820 - 932 - 901 - 934 - 1290 - 1330 - 1320 {{\u003c /echarts \u003e}} The same in TOML format: {{\u003c echarts \u003e}} [title] text = \"Summary Line Chart\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"Email Marketing\", \"Affiliate Advertising\", \"Video Advertising\", \"Direct View\", \"Search Engine\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"Save as Image\" [xAxis] type = \"category\" boundaryGap = false data = [ \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\" ] [yAxis] type = \"value\" [[series]] name = \"Email Marketing\" type = \"line\" stack = \"Total\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"Affiliate Advertising\" type = \"line\" stack = \"Total\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"Video Advertising\" type = \"line\" stack = \"Total\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"Direct View\" type = \"line\" stack = \"Total\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name =","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-echarts-shortcode/:0:0","tags":["shortcodes"],"title":"Theme Documentation - echarts Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-echarts-shortcode/"},{"categories":["documentation"],"content":"The mapbox shortcode supports interactive maps in Hugo with Mapbox GL JS library.","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mapbox-shortcode/","tags":["shortcodes"],"title":"Theme Documentation - mapbox Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mapbox-shortcode/"},{"categories":["documentation"],"content":" The mapbox shortcode supports interactive maps in Hugo with Mapbox GL JS library. Mapbox GL JS is a JavaScript library that uses WebGL to render interactive maps from vector tiles and Mapbox styles. The mapbox shortcode has the following named parameters to use Mapbox GL JS: lng [required] (first positional parameter) Longitude of the inital centerpoint of the map, measured in degrees. lat [required] (second positional parameter) Latitude of the inital centerpoint of the map, measured in degrees. zoom [optional] (third positional parameter) The initial zoom level of the map, default value is 10. marked [optional] (fourth positional parameter) Whether to add a marker at the inital centerpoint of the map, default value is true. light-style [optional] (fifth positional parameter) Style for the light theme, default value is the value set in the front matter or the site configuration. dark-style [optional] (sixth positional parameter) Style for the dark theme, default value is the value set in the front matter or the site configuration. navigation [optional] Whether to add NavigationControl, default value is the value set in the front matter or the site configuration. geolocate [optional] Whether to add GeolocateControl, default value is the value set in the front matter or the site configuration. scale [optional] Whether to add ScaleControl, default value is the value set in the front matter or the site configuration. fullscreen [optional] Whether to add FullscreenControl, default value is the value set in the front matter or the site configuration. width [optional] Width of the map, default value is 100%. height [optional] Height of the map, default value is 20rem. Example simple mapbox input: {{\u003c mapbox 121.485 31.233 12 \u003e}} Or {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} The rendered output looks like this: Example mapbox input with the custom style: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/navigation-preview-day-v4\" \"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} Or {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/navigation-preview-day-v4\" dark-style=\"mapbox://styles/mapbox/navigation-preview-night-v4\" \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-mapbox-shortcode/:0:0","tags":["shortcodes"],"title":"Theme Documentation - mapbox Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-mapbox-shortcode/"},{"categories":["documentation"],"content":"The music shortcode embeds a responsive music player based on APlayer and MetingJS library.","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/","tags":["shortcodes"],"title":"Theme Documentation - music Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"The music shortcode embeds a responsive music player based on APlayer and MetingJS. There are three ways to use it the music shortcode. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/:0:0","tags":["shortcodes"],"title":"Theme Documentation - music Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"1 Custom Music URL The complete usage of local resource references is supported. The music shortcode has the following named parameters by custom music URL: server [required] URL of the custom music. name [optional] Name of the custom music. artist [optional] Artist of the custom music. cover [required] URL of the custom music cover. Example music input by custom music URL: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/:1:0","tags":["shortcodes"],"title":"Theme Documentation - music Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"2 Music Platform URL Automatic Identification The music shortcode has one named parameter by music platform URL automatic identification: auto [required] (first positional parameter) URL of the music platform URL for automatic identification, which supports netease, tencent and xiami music platform. Example music input by music platform URL automatic identification: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} Or {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/:2:0","tags":["shortcodes"],"title":"Theme Documentation - music Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"3 Custom Server, Type and ID The music shortcode has the following named parameters by custom music platform: server [required] (first positional parameter) [netease, tencent, kugou, xiami, baidu] Music platform. type [required] (second positional parameter) [song, playlist, album, search, artist] Type of the music. id [required] (third positional parameter) Song ID, or playlist ID, or album ID, or search keyword, or artist ID. Example music input by custom music platform: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} Or {{\u003c music netease song 1868553 \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/:3:0","tags":["shortcodes"],"title":"Theme Documentation - music Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"4 Other Parameters The music shortcode has other named parameters applying to the above three ways: theme [optional] Main color of the music player, default value is #448aff. fixed [optional] Whether to enable fixed mode, default value is false. mini [optional] Whether to enable mini mode, default value is false. autoplay [optional] Whether to autoplay music, default value is false. volume [optional] Default volume when the player is first opened, which will be remembered in the browser, default value is 0.7. mutex [optional] Whether to pause other players when this player starts playing, default value is true. The music shortcode has the following named parameters only applying to the type of music list: loop [optional] [all, one, none] Loop mode of the music list, default value is none. order [optional] [list, random] Play order of the music list, default value is list. list-folded [optional] Whether the music list should be folded at first, default value is false. list-max-height [optional] Max height of the music list, default value is 340px. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/:4:0","tags":["shortcodes"],"title":"Theme Documentation - music Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"The bilibili shortcode embeds a responsive video player for bilibili videos.","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-bilibili-shortcode/","tags":["shortcodes"],"title":"Theme Documentation - bilibili Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-bilibili-shortcode/"},{"categories":["documentation"],"content":" The bilibili shortcode embeds a responsive video player for bilibili videos. When the video only has one part, only the BV id of the video is required, e.g.: https://www.bilibili.com/video/BV1Sx411T7QQ Example bilibili input: {{\u003c bilibili BV1Sx411T7QQ \u003e}} Or {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} The rendered output looks like this: When the video has multiple parts, in addition to the BV id of the video, p is also required, whose default value is 1, e.g.: https://www.bilibili.com/video/BV1TJ411C7An?p=3 Example bilibili input with p: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} Or {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-bilibili-shortcode/:0:0","tags":["shortcodes"],"title":"Theme Documentation - bilibili Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-bilibili-shortcode/"},{"categories":["documentation"],"content":"The typeit shortcode provides typing animation based on TypeIt library.","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/","tags":["shortcodes"],"title":"Theme Documentation - typeit Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"The typeit shortcode provides typing animation based on TypeIt library. Just insert your content in the typeit shortcode and that’s it. ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/:0:0","tags":["shortcodes"],"title":"Theme Documentation - typeit Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"1 Simple Content Simple content is allowed in Markdown format and without rich block content such as images and more… Example typeit input: {{\u003c typeit \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: Alternatively, you can use custom HTML tags. Example typeit input with h4 tag: {{\u003c typeit tag=h4 \u003e}} This is a *paragraph* with **typing animation** based on [TypeIt](https://typeitjs.com/)... {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/:1:0","tags":["shortcodes"],"title":"Theme Documentation - typeit Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"2 Code Content Code content is allowed and will be highlighted by named parameter code for the type of code language. Example typeit input with code: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/:2:0","tags":["shortcodes"],"title":"Theme Documentation - typeit Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"3 Group Content All typing animations start at the same time by default. But sometimes you may want to start a set of typeit contents in order. A set of typeit contents with the same value of named parameter group will start typing animation in sequence. Example typeit input with group: {{\u003c typeit group=paragraph \u003e}} **First** this paragraph begins {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **Then** this paragraph begins {{\u003c /typeit \u003e}} The rendered output looks like this: ","date":"2020-03-03","objectID":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/:3:0","tags":["shortcodes"],"title":"Theme Documentation - typeit Shortcode","uri":"https://www.bardblog.cn/en/theme-documentation-typeit-shortcode/"},{"categories":["technology"],"content":"Introduction to the core concepts of MySQL","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"MySQL Introduction to the core concepts of MySQL and their underlying implementation, all based on the MySQL InnoDB storage engine. ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:0:0","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"SQL Statement Execution Process When we start learning SQL, the first thing we usually learn is the select statement. Here’s a simple query: // Retrieve a record with id=1 from the student table select * from student where id=1; What is the complete process involved in executing this SQL statement? “What does MySQL do internally when executing this simple SQL statement?” With these questions in mind, let’s dive into MySQL and explore its internal architecture. Let’s start by looking at the execution process of an SQL statement from a global perspective. The diagram below illustrates the entire flow of a SQL statement, from the client to the data storage, including the modules within the MySQL architecture. MySQL Execution Flow We can see that MySQL is divided into two layers: the Server layer and the storage engine layer. The Server layer is responsible for establishing client connections, analyzing, optimizing, and executing SQL statements. The Server layer is independent of the storage engine. It encompasses the core modules of MySQL, including the connector, parser, preprocessor, optimizer, and executor. Additionally, MySQL’s built-in functions and all cross-storage engine features are implemented in the Server layer. The storage engine layer is responsible for data retrieval and storage. There are multiple storage engines available, with InnoDB, MyISAM, and Memory being common ones. These engines provide the same interface to the Server layer but have different specific implementations. In this article, we will mainly focus on the InnoDB storage engine, which is also the default storage engine in MySQL. Familiar concepts in MySQL, such as indexes, transactions, and locks, are implemented at the storage engine layer. InnoDB uses B+ tree indexes, and primary key indexes, composite indexes, and regular indexes created in database tables all use B+ tree indexes. The above description provides an overview of the overall architecture of MySQL, which can be considered “not too complex.” It consists of the Server layer and the storage engine layer. Let’s now delve into the specific details. ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:1:0","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Connector If you want to perform CRUD operations on MySQL, the first step is to establish a connection with MySQL. Generally, the following command is used to establish a connection with the MySQL service: # -h specifies the hostname or IP address # -u specifies the username # -p specifies the password, for security reasons it is generally not hard-coded and is manually entered in the console after executing the command mysql -h ip -u user -p For example: mysql -h 192.168.1.111 -u root -p Since MySQL’s transport layer protocol is based on TCP, the process of establishing a connection requires the TCP three-way handshake. If the MySQL server is running properly, after establishing the TCP connection, it will verify if the username and password are correct. If the username or password is incorrect, an error will be reported: Access denied for user. If the username and password are correct, the connector will query the permissions associated with that user based on the username. It will save the permissions in memory, and until the connection is closed, even if the administrator modifies the user’s permissions, it will not affect the permissions for the current connection. The new permissions will be used only when the next connection is established. During the current connection’s lifecycle, all read and write operations for the user will be based on the permissions saved in memory during authentication. You can use the following command to view the current connections established with the MySQL server: mysql\u003e show processlist; +----------+------+--------------------+-------------+---------+------+-------+------------------+ | Id | User | Host | db | Command | Time | State | Info | +----------+------+--------------------+-------------+---------+------+-------+------------------+ | 10773010 | root | 10.99.17.131:21086 | NULL | Sleep | 210 | | NULL | | 10773094 | root | 10.99.17.131:23980 | mysql_learn | Sleep | 72 | | NULL | | 10773150 | root | 10.99.17.131:25924 | NULL | Query | 0 | init | show processlist | +----------+------+--------------------+-------------+---------+------+-------+------------------+ 3 rows in set (0.02 sec) You can see that three users with the username “root” have established connections with the MySQL service. Among them, the user with Id 10773010 has an empty database (db) and the value of Command is “Sleep”, indicating that the user has not executed any other commands after connecting and has been idle for 210 seconds (Time column). Does this idle time keep increasing indefinitely? In other words, does the MySQL connection stay open continuously? Certainly not. It is not possible for a connection to be established a year ago and for MySQL to keep it active while I haven’t done anything (just like making a reservation at a restaurant and if you don’t show up within a certain time, they will cancel it). MySQL also has a similar mechanism. If a connection remains idle for a long time without any activity, it will automatically be closed after a certain period of time. This maximum idle time is controlled by the wait_timeout parameter, which defaults to 2 * 60 * 60 = 7200 seconds. mysql\u003e show variables like 'wait_timeout'; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | wait_timeout | 7200 | +---------------+-------+ 1 row in set (0.03 sec) If we find a connection undesirable, we can also manually kill that connection using the kill connection +Id command. If I want to kill the connection with Id 10773010, I simply execute the following command: mysql\u003e kill connection +10773010; Query OK, 0 rows affected (0.02 sec) mysql\u003e show processlist; +----------+------+--------------------+-------------+---------+------+-------+------------------+ | Id | User | Host | db | Command | Time | State | Info | +----------+------+--------------------+-------------+---------+------+-------+------------------+ | 10773094 | root | 10.99.17.131:23980 | mysql_learn | Sleep | 895 | | NULL | | 10773","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:1:1","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Query Cache After establishing a connection, the client can send SQL statements to the MySQL server for execution. Upon receiving an SQL statement, the MySQL server first determines whether it is a query statement (based on whether the first field of the SQL statement is “SELECT”). If it is a query statement, MySQL checks the query cache to see if there is a cached result for this SQL statement. If a cached result exists, it is directly returned to the client without further processing. The cache is stored in a key-value format, where the key is the SQL query statement and the value is the query result. While this caching mechanism seems promising, there are concerns regarding cache hit rates and efficiency. In general, MySQL’s query cache has a high invalidation rate because any data update in the MySQL table will invalidate the cache. For example, if we execute the following query: SELECT * FROM student WHERE id=1; After the first execution of this query, MySQL caches the result for id=1. However, if MySQL performs an update statement, the cache will be invalidated. For instance, if MySQL updates the data for id=2: UPDATE student SET name='张三' WHERE id=2; One might wonder why MySQL takes such a blunt approach. After all, updating id=2 should not affect the result for id=1. However, MySQL does not have knowledge of whether updating id=2 would impact the record for id=1, or the cost of determining the impact is too high (difficult to assess). To ensure data consistency, MySQL simply invalidates the cache whenever there is an update operation. From the analysis above, it appears that the query cache has limited utility. Even in scenarios where there are more reads than writes, complete avoidance of writes is not feasible. As long as there is a write operation, all caches for the table become invalidated, incurring significant costs. Therefore, starting from version 8.0, MySQL has removed the query cache feature. ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:1:2","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Parser For an SQL statement to be executed successfully, it must first comply with the SQL syntax rules defined by MySQL. These rules can be understood as the mutually agreed-upon guidelines between us and MySQL. We adhere to these rules when writing SQL statements, and similarly, MySQL follows these rules to parse and execute the SQL statements we write. It is not feasible for us to provide MySQL with arbitrary strings and expect it to execute them. Before executing an SQL statement, MySQL needs to understand the purpose of the statement, whether it is an insert, delete, update, or select operation, as well as the tables and fields involved in the SQL statement. This information can be extracted based on the syntax rules, which is essentially the task of the parser. The parser performs two main tasks: Syntax Analysis: MySQL checks whether the SQL statement has any syntax errors based on the agreed-upon syntax rules. If there are syntax errors, MySQL will directly report an error, such as “You have an error in your SQL syntax”. For example, if we execute the following statement: mysql\u003e slect * from friend where id=1; ERROR 2013 (HY000): Lost connection to MySQL server during query No connection. Trying to reconnect... Connection id: 10788396 Current database: mysql_learn ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'slect * from friend where id=1' at line 1 mysql\u003e Here, we mistakenly typed slect instead of select. MySQL checks the SQL statement against the syntax rules and identifies that it does not conform to the syntax. As a result, it reports an error. This process is similar to the parameter validation commonly used in backend development. Lexical Analysis: Regardless of the complexity of an SQL statement, it always follows certain patterns. For example, the keyword where is always followed by a query condition, and the keyword from is followed by a table name. MySQL implements a lexical analyzer that extracts table names, SQL types, field names, and query conditions from the SQL statement. This preparation work is then passed on to the subsequent modules for further processing. It’s important to note that while syntax checking and lexical analysis are performed by the parser, the verification of table names and field names’ existence is not handled at the parser level. This can be understood as the parser layer being focused on local logic and not involving network or API calls. ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:1:3","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Preprocessor Once an SQL statement is parsed, it can be determined that the statement is potentially executable. However, this doesn’t guarantee its successful execution. Parsing the SQL statement ensures that the syntax is correct and extracts key information such as table names, but it doesn’t verify if the SQL statement can be executed successfully. For example, if the SQL statement refers to a table that doesn’t exist, it won’t be executed successfully. The preprocessor performs two main tasks: Checking the Existence of Tables and Fields: The preprocessor checks whether the table names and field names extracted by the parser exist. This step involves reading table information and verifying the existence of table names and field names. If any of the referenced tables or fields don’t exist, an error is returned. Replacing * with Actual Field Names: The preprocessor replaces the * symbol (which denotes selecting all fields) with the actual field names of the table. This step is necessary to determine the specific fields to be retrieved from the table. Unlike the parser, the preprocessor step involves more than just local logic. During the preprocessing phase, it requires reading table information and potentially making API calls to check the existence of tables and fields. If we execute the following SQL statement and encounter an error, it is actually returned by the preprocessor: mysql\u003e select * from frined where id=1; ERROR 1146 (42S02): Table 'mysql_learn.frined' doesn't exist mysql\u003e In this example, the preprocessor identifies that the table name frined doesn’t exist, leading to an error indicating the table doesn’t exist in the specified database. ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:1:4","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Optimizer After the SQL statement goes through the parser and preprocessor, it reaches the optimizer. Strictly speaking, at this point, it can no longer be called an SQL statement because it has been significantly transformed. The optimizer’s role is crucial because it selects an optimal execution plan based on the SQL statement and the actual data in the tables. For example, if a query has multiple indexes, the optimizer analyzes and determines which index to use based on the estimated cost. Additionally, if the table has a small amount of data, a full table scan might be more efficient than using an index. To understand the execution plan of a query, we often use the EXPLAIN command. By adding the EXPLAIN keyword before the SELECT statement, we can see the execution plan. Query 1: mysql\u003e explain select * from `like` where id=1; +----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+ | 1 | SIMPLE | like | NULL | const | PRIMARY | PRIMARY | 4 | const | 1 | 100.00 | NULL | +----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+ 1 row in set, 1 warning (0.04 sec) mysql\u003e Query 2: mysql\u003e explain select * from `like` limit 1; +----+-------------+-------+------------+-------+---------------+---------------------+---------+------+------+----------+-------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+-------+------------+-------+---------------+---------------------+---------+------+------+----------+-------------+ | 1 | SIMPLE | like | NULL | index | NULL | uk_user_id_liker_id | 8 | NULL | 3 | 100.00 | Using index | +----+-------------+-------+------------+-------+---------------+---------------------+---------+------+------+----------+-------------+ 1 row in set, 1 warning (0.03 sec) mysql\u003e In the above examples, the key column is not empty. In Query 1, MySQL chooses to use the PRIMARY key index, while in Query 2, it uses the uk_user_id_liker_id unique index. If the key column is empty, it means that no index is used, and a full table scan is performed. In practice, even for identical SQL statements, the execution plan may vary depending on various factors, including indexes and the size of table data. In summary, MySQL’s optimizer selects a relatively optimal execution plan based on several conditions to minimize the execution cost of SQL statements. ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:1:5","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Executor After the preceding steps, we finally come to the actual execution of the SQL statement. The executor acts as a bridge between the MySQL server layer and the storage engine layer. The executor doesn’t execute the SQL statement directly; instead, it passes the processed “SQL statement” to the storage engine through API interfaces. It then waits for the storage engine to return the execution results, which are then passed back to the query cache and the connector. ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:1:6","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Indexes ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:2:0","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Three Main Logs ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:3:0","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Undo Log ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:3:1","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Redo Log ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:3:2","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Binary Log ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:3:3","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Locks ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:4:0","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Transactions ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:5:0","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Atomicity ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:5:1","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Durability ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:5:2","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Isolation ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:5:3","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Consistency ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:5:4","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Data Structures ","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:6:0","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Memory","date":"2023-07-01","objectID":"https://www.bardblog.cn/en/mysql-core-concepts/:7:0","tags":["MySQL","InnoDB"],"title":"Core Concepts of MySQL","uri":"https://www.bardblog.cn/en/mysql-core-concepts/"},{"categories":["technology"],"content":"Introduction to some less common advanced usage of Git","date":"2023-06-27","objectID":"https://www.bardblog.cn/en/git-advanced-usage/","tags":["git","linux"],"title":"Advanced Usage of Git","uri":"https://www.bardblog.cn/en/git-advanced-usage/"},{"categories":["technology"],"content":"Git Submodules ","date":"2023-06-27","objectID":"https://www.bardblog.cn/en/git-advanced-usage/:1:0","tags":["git","linux"],"title":"Advanced Usage of Git","uri":"https://www.bardblog.cn/en/git-advanced-usage/"},{"categories":["technology"],"content":"Concept Git submodules allow you to include another Git repository as a subdirectory within your main (parent) repository. Each submodule is an independent Git project with its own commits, pull requests, and pushes. The parent repository includes multiple submodules as part of its structure. ","date":"2023-06-27","objectID":"https://www.bardblog.cn/en/git-advanced-usage/:1:1","tags":["git","linux"],"title":"Advanced Usage of Git","uri":"https://www.bardblog.cn/en/git-advanced-usage/"},{"categories":["technology"],"content":"Example Let’s walk through an example to understand how to use Git submodules. Create a folder named “gitSubmodules” and initialize it as a Git repository: mkdir gitSubmodules cd gitSubmodules git init Add a remote origin and push the repository to GitHub: git remote add origin git@github.com:YOUR_USERNAME/gitSubmodules.git echo \"About gitSubmodules\" \u003e\u003e README.md git add . git commit -m \"Initialize gitSubmodules\" git push --set-upstream origin main Here, replace “YOUR_USERNAME” with your actual GitHub username. Now, let’s add two submodules to the “gitSubmodules” repository: git submodule add git@github.com:YOUR_USERNAME/submodule1.git git submodule add git@github.com:YOUR_USERNAME/submodule2.git By executing these commands, the submodules “submodule1” and “submodule2” will be added to the “gitSubmodules” repository. This command will clone the remote repositories of the submodules into the root directory of the “gitSubmodules” repository. By default, each submodule will be placed in a directory with the same name as the submodule repository. If you run git status at this point, you will see that the repository now contains a new file named “.gitmodules” and two new directories: “submodule1” and “submodule2”. The “.gitmodules” file stores the mapping between the local directory paths and the remote repository URLs of the submodules. Commit and push the changes to the parent repository: git add . git commit -m \"Add submodule1 and submodule2 submodules\" git push This will push the submodule information to the remote repository as well. If someone else clones the “gitSubmodules” repository, they will initially have empty directories for the submodules. To populate the submodules with their respective contents, they need to run the following commands: git submodule init git submodule update After running these commands, the submodules’ remote files will be synchronized to the local repository, including the commit information for each submodule. ","date":"2023-06-27","objectID":"https://www.bardblog.cn/en/git-advanced-usage/:1:2","tags":["git","linux"],"title":"Advanced Usage of Git","uri":"https://www.bardblog.cn/en/git-advanced-usage/"},{"categories":["technology"],"content":"Use Cases Git submodules are useful when you need to include other projects within your main project. Each project can have its own separate repository and version control history, ensuring that modifications to the main and submodules do not affect each other. ","date":"2023-06-27","objectID":"https://www.bardblog.cn/en/git-advanced-usage/:1:3","tags":["git","linux"],"title":"Advanced Usage of Git","uri":"https://www.bardblog.cn/en/git-advanced-usage/"},{"categories":null,"content":"About Bard","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/about/","tags":null,"title":"About Bard","uri":"https://www.bardblog.cn/en/about/"},{"categories":null,"content":"English name: BardChen Location: ShenZhen Carrer: Programmer Sports：Running, badminton, mountain climbing. Blog soucre code：https://github.com/YourFantasy/blog Blog Philosophy：Record life and growth. ","date":"2023-06-24","objectID":"https://www.bardblog.cn/en/about/:0:0","tags":null,"title":"About Bard","uri":"https://www.bardblog.cn/en/about/"}]